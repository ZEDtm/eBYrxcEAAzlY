version: '3.9'

services:
  nginx:
    image: nginx:latest
    restart: always
    ports:
      - ${NGINX_PORT}:${NGINX_PORT}
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf
      - ./static:/static
      - ./media:/media
    depends_on:
      - admin_panel

  admin_panel:
    build:
      context: .
    restart: always
    env_file:
      - .env
    environment:
      DATABASE_URL: psql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
    depends_on:
      postgres:
        condition: service_healthy
    container_name: admin_panel
    volumes:
      - ./static:/static
      - ./media:/media

  bot:
    build:
      context: .
    env_file:
      - .env
    restart: always
    environment:
      DATABASE_URL: psql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      REDIS_URL: redis://redis:${REDIS_PORT}/0
      REDIS_HOST: redis
    volumes:
      - ./bot:/bot
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
    container_name: aiogram_bot
    command: ['python', 'manage.py', 'runbot']

  redis:
    image: redis:latest
    restart: always
    ports:
      - ${REDIS_PORT}:${REDIS_PORT}
    environment:
      - REDIS_PORT=${REDIS_PORT}
      - REDIS_DATABASES=${REDIS_DATABASES}
    volumes:
      - redis_invest:/data
    container_name: redis_invest

  postgres:
    image: postgres:latest
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    restart: always
    ports:
      - ${POSTGRES_PORT}:${POSTGRES_PORT}
    volumes:
      - postgres_invest:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 30s
      retries: 5
    container_name: postgres_invest

  fastapi:
    build:
      context: ./fastapi_app
    restart: always
    environment:
      FAST_API_HOST: ${FAST_API_HOST}
      FAST_API_URL: ${FAST_API_URL}
      MONGO_URL: ${MONGO_URL}
      TG_TOKEN_BOT: ${TG_TOKEN_BOT}
    container_name: fastapi_app
    command: ["python", "app.py"]

  mongo:
    image: mongo:latest
    restart: always
    volumes:
      - ./mongo_data:/data/db
    ports:
      - "27017:27017"

volumes:
  redis_invest:
  postgres_invest:
  mongo_data:
