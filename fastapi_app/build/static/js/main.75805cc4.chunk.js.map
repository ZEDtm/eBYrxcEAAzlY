{"version":3,"sources":["components/Notification/Notification.module.css","blocks/UsersList/UserList.module.css","App.module.css","components/ThemeToggle/ThemeToggle.module.css","components/ui/scrollDown/ScrollDown.module.css","components/Message/Message.module.css","blocks/Messenger/Messenger.module.css","blocks/Chat.module.css","components/ui/icons/UserIcon.jsx","components/User/User.jsx","components/ThemeToggle/ThemeToggle.jsx","blocks/UsersList/UsersList.jsx","api/api.jsx","components/ui/icons/ClipIcon.jsx","components/ui/icons/SendIcon.jsx","components/MessageInput/MessageInput.jsx","components/ui/icons/FileIcon.jsx","components/Message/Message.jsx","blocks/Messenger/utils/formatDate.jsx","components/ui/scrollDown/ScrollDown.jsx","blocks/Messenger/Messenger.jsx","components/Notification/Notification.jsx","api/socket.jsx","blocks/Chat.jsx","App.js","reportWebVitals.js","index.js","components/MessageInput/MessageInput.module.css","components/User/User.module.css"],"names":["module","exports","UserIcon","_ref","className","React","createElement","xmlns","viewBox","id","d","UserComponent","user","onSelectUser","unreadCount","styles","userCard","onClick","userInfoContainer","userIconContainer","userIcon","userInfo","userFullName","name","surname","additionInfo","phone","count","ThemeToggle","isDarkMode","setIsDarkMode","useState","useEffect","savedTheme","localStorage","getItem","document","documentElement","setAttribute","toggleContainer","type","checked","onChange","toggleTheme","newTheme","setItem","toggleSlider","UsersList","users","unreadCounts","searchTerm","setSearchTerm","filteredUsers","filter","toLowerCase","includes","container","searchContainer","style","width","search","placeholder","value","e","target","map","key","FAST_API_URL","window","env","API_KEY","API_URL","TELEGRAM_API_URL","TELEGRAM_FILE_URL","axiosInstance","axios","create","baseURL","headers","sendPhoto","async","chatId","photo","caption","arguments","length","undefined","url","formData","FormData","append","response","post","fileInfo","data","result","fileId","file_id","fileSize","file_size","file_name","mime_type","sendVideo","video","console","log","sendDocument","ClipIcon","color","height","strokeWidth","fill","stroke","strokeLinecap","strokeLinejoin","SendIcon","xmlnsXlink","fillRule","transform","points","MessageInput","userId","onSendMessage","socket","message","setMessage","attachedFiles","setAttachedFiles","textareaRef","useRef","fileInputRef","messageIdCounter","files","loadStateFromSessionStorage","adjustTextareaHeight","textarea","current","scrollHeight","saveStateToSessionStorage","sessionStorage","fileObjects","file","lastModified","size","JSON","stringify","savedMessage","savedFiles","parse","fileObj","File","inputContainer","index","attachedFileContainer","attachedFileCounterWeight","attachedFile","attachedFileCancel","prevFiles","newFiles","splice","_","i","handleFileDelete","attachedFileCancelLine","display","justifyContent","alignItems","AttachButton","margin","justifyItems","click","ref","TextArea","newMessage","onInput","multiple","Array","from","fileInput","sendButtonContainer","trim","uniqueId","text","status","sender","recipient","date","Date","now","old_id","newMessageOnFiles","files_count","fileResponses","mimeType","startsWith","sendMessageWithFile","updateMessage","message_id","fileResponse","emit","media","randomName","parse_mode","forEach","item","sendMediaGroup","chat_id","sendMessage","error","FileIcon","x","y","Modal","setAppElement","MessageComponent","loading","setLoading","setFiles","modalIsOpen","setModalIsOpen","selectedImage","setSelectedImage","messageClass","rightMessage","leftMessage","fetchFiles","urls","Promise","all","file_is_too_big","file_path","getFileUrl","formatFileSize","bytes","Math","floor","parseFloat","pow","toFixed","fileAttachment","shimmerSquare","openModal","cursor","image","src","alt","href","download","controls","fileName","fileIcon","messageText","messageInfo","dateTime","unixTime","getHours","toString","padStart","getMinutes","formatTime","Fragment","statusSending","statusSent","statusError","isOpen","onRequestClose","closeModal","contentLabel","content","maxWidth","maxHeight","formatDate","timestamp","messageDate","isToday","toDateString","isYesterday","setDate","getDate","options","day","month","toLocaleDateString","ScrollDown","showScrollButton","scrollButton","scrollButtonHide","Messenger","toggleUserList","newMessages","addedMessagesRef","messages","setMessages","setShowScrollButton","messagesEndRef","messagesContainerRef","storedMessages","unreadMessages","combinedMessages","oldMessages","get","user_id","getMessages","uniqueMessages","Set","msg","find","markMessagesAsRead","removeItem","fetchMessages","setTimeout","scrollToBottom","behavior","prevMessages","updatedMessages","some","push","_messagesEndRef$curre","scrollIntoView","observer","IntersectionObserver","_ref2","entry","isIntersecting","root","rootMargin","threshold","currentMessagesEndRef","observe","unobserve","mainWindow","header","connectionStatus","burgerMenu","burgerLine","infoContainer","slice","sort","a","b","currentDate","prevMessage","prevDate","showDate","dateSeparator","dateSeparatorText","Message","Notification","onClickOpen","onClickOk","notification","notificationContent","notificationUser","notificationText","notificationClose","io","transports","withCredentials","extraHeaders","Chat","selectedUser","setSelectedUser","setUsers","isUserListVisible","setIsUserListVisible","setUnreadCounts","setNewMessages","isSocketConnected","setIsSocketConnected","handleUserSelect","prevCounts","handleNewMessage","useCallback","update","u","enqueueSnackbar","closeSnackbar","senderMessages","isArray","on","off","groupedMessages","unread_messages","getUnreadMessages","reduce","acc","Object","keys","fetchUnreadMessages","usersData","getUsers","fetchUsers","Telegram","WebApp","ready","enableClosingConfirmation","disableVerticalSwipes","expand","chatContainer","userList","visible","chat","connectingContainer","connecting","serverIcon","connectingArrows","connectingArrow","connectingDot","App","app","SnackbarProvider","transparentSnackbar","maxSnack","anchorOrigin","vertical","horizontal","preventDuplicate","autoHideDuration","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","getElementById","render"],"mappings":"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","file":"static/js/main.75805cc4.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"notification\":\"Notification_notification__2fMW3\",\"notificationContent\":\"Notification_notificationContent__3U5_2\",\"notificationUser\":\"Notification_notificationUser__1wsPX\",\"notificationText\":\"Notification_notificationText__3KTF0\",\"notificationClose\":\"Notification_notificationClose__kOyTA\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"UserList_container__2_-sc\",\"searchContainer\":\"UserList_searchContainer__NeQ3E\",\"search\":\"UserList_search__2jubq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"App_app__2WJfA\",\"App-logo\":\"App_App-logo__27M-q\",\"appLogo\":\"App_appLogo__5BAM9\",\"App-logo-spin\":\"App_App-logo-spin__38JR9\",\"transparentSnackbar\":\"App_transparentSnackbar__2Znso\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"toggleContainer\":\"ThemeToggle_toggleContainer__1GEhY\",\"toggleSlider\":\"ThemeToggle_toggleSlider__Q-xG7\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"scrollButton\":\"ScrollDown_scrollButton__3REEp\",\"scrollButtonHide\":\"ScrollDown_scrollButtonHide__HiKNF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"message\":\"Message_message__2_RMz\",\"leftMessage\":\"Message_leftMessage__1VfeK\",\"rightMessage\":\"Message_rightMessage__Fh45H\",\"fileAttachment\":\"Message_fileAttachment__3sbql\",\"file\":\"Message_file__tF3TQ\",\"fileName\":\"Message_fileName__TuoP9\",\"image\":\"Message_image__2I5c8\",\"video\":\"Message_video__1BKkF\",\"document\":\"Message_document__1Fhpc\",\"fileIcon\":\"Message_fileIcon__1cpqB\",\"fileSize\":\"Message_fileSize__285Nr\",\"messageText\":\"Message_messageText__2dnAL\",\"messageInfo\":\"Message_messageInfo__2x5Az\",\"statusError\":\"Message_statusError__3q3bB\",\"statusSent\":\"Message_statusSent__LlSH_\",\"statusSending\":\"Message_statusSending__yGdxr\",\"dateTime\":\"Message_dateTime__3JMQA\",\"shimmerSquare\":\"Message_shimmerSquare__3i__N\",\"shimmer\":\"Message_shimmer__1Aker\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"mainWindow\":\"Messenger_mainWindow__IZIYJ\",\"container\":\"Messenger_container__JzgK_\",\"header\":\"Messenger_header__wMfMB\",\"burgerMenu\":\"Messenger_burgerMenu__3Xuj2\",\"burgerLine\":\"Messenger_burgerLine__3qUFP\",\"connectionStatus\":\"Messenger_connectionStatus__2hK2T\",\"infoContainer\":\"Messenger_infoContainer__159Vt\",\"userFullName\":\"Messenger_userFullName__1QaTm\",\"chatId\":\"Messenger_chatId__2NI1y\",\"content\":\"Messenger_content__3m4wu\",\"messages\":\"Messenger_messages__13xEj\",\"dateSeparator\":\"Messenger_dateSeparator__19WYA\",\"dateSeparatorText\":\"Messenger_dateSeparatorText__9AZLa\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"connectingContainer\":\"Chat_connectingContainer__8vB8A\",\"connecting\":\"Chat_connecting__clgPY\",\"connectingDot\":\"Chat_connectingDot__3ZhMt\",\"blink\":\"Chat_blink__2xmqZ\",\"serverIcon\":\"Chat_serverIcon__2yIW5\",\"pulse\":\"Chat_pulse__1TsKF\",\"connectingArrows\":\"Chat_connectingArrows__2SMIa\",\"connectingArrow\":\"Chat_connectingArrow__2jrl7\",\"chatContainer\":\"Chat_chatContainer__1hQZN\",\"userList\":\"Chat_userList__2BEJI\",\"visible\":\"Chat_visible__5605_\",\"chat\":\"Chat_chat__R0dBl\"};","import React from 'react';\r\n\r\n\r\nconst UserIcon = ({className}) => {\r\n    return (\r\n        <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 32 32\">\r\n            <title>About</title>\r\n            <g id=\"about\" className={className}>\r\n                <path d=\"M16,16A7,7,0,1,0,9,9,7,7,0,0,0,16,16ZM16,4a5,5,0,1,1-5,5A5,5,0,0,1,16,4Z\"/>\r\n                <path d=\"M17,18H15A11,11,0,0,0,4,29a1,1,0,0,0,1,1H27a1,1,0,0,0,1-1A11,11,0,0,0,17,18ZM6.06,28A9,9,0,0,1,15,20h2a9,9,0,0,1,8.94,8Z\"/>\r\n            </g>\r\n        </svg>\r\n    );\r\n};\r\n\r\nexport default UserIcon;","import React from 'react';\r\nimport styles from './User.module.css';\r\nimport UserIcon from \"../ui/icons/UserIcon\";\r\n\r\n\r\nconst UserComponent = ({ user, onSelectUser, unreadCount }) => {\r\n    return (\r\n        <div className={styles.userCard} onClick={() => onSelectUser(user)}>\r\n            <div className={styles.userInfoContainer}>\r\n                <div className={styles.userIconContainer}>\r\n                    <UserIcon className={styles.userIcon}/>\r\n                </div>\r\n                <div className={styles.userInfo}>\r\n                    <div className={styles.userFullName}>{user.name} {user.surname}</div>\r\n                    <div className={styles.additionInfo}>{user.phone}</div>\r\n                </div>\r\n            </div>\r\n            {unreadCount > 0 && (\r\n                <div className={styles.unreadCount}>\r\n                    <div className={styles.count}>{unreadCount}</div>\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\nexport default UserComponent;","import React, { useState, useEffect } from 'react';\r\nimport styles from './ThemeToggle.module.css';\r\n\r\nconst ThemeToggle = () => {\r\n    const [isDarkMode, setIsDarkMode] = useState(false);\r\n\r\n    useEffect(() => {\r\n        const savedTheme = localStorage.getItem('theme');\r\n        if (savedTheme) {\r\n            setIsDarkMode(savedTheme === 'dark');\r\n            document.documentElement.setAttribute('data-theme', savedTheme);\r\n        }\r\n    }, []);\r\n\r\n    const toggleTheme = () => {\r\n        const newTheme = isDarkMode ? 'light' : 'dark';\r\n        document.documentElement.setAttribute('data-theme', newTheme);\r\n        setIsDarkMode(!isDarkMode);\r\n        localStorage.setItem('theme', newTheme);\r\n    };\r\n\r\n    return (\r\n        <label className={styles.toggleContainer}>\r\n            <input type=\"checkbox\" checked={isDarkMode} onChange={toggleTheme} />\r\n            <span className={styles.toggleSlider}></span>\r\n        </label>\r\n    );\r\n};\r\n\r\nexport default ThemeToggle;","import React, { useState } from 'react';\r\nimport UserComponent from \"../../components/User/User\";\r\nimport styles from './UserList.module.css';\r\nimport ThemeToggle from \"../../components/ThemeToggle/ThemeToggle\";\r\n\r\nconst UsersList = ({ users, onSelectUser, unreadCounts }) => {\r\n    const [searchTerm, setSearchTerm] = useState('');\r\n\r\n\r\n    const filteredUsers = users.filter(user =>\r\n        user.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\r\n        user.surname.toLowerCase().includes(searchTerm.toLowerCase())\r\n    );\r\n\r\n    return (\r\n        <div className={styles.container}>\r\n            <div className={styles.searchContainer}>\r\n                <div style={{width: \"60px\"}}></div>\r\n                <input\r\n                    className={styles.search}\r\n                    type=\"text\"\r\n                    placeholder=\"Поиск...\"\r\n                    value={searchTerm}\r\n                    onChange={(e) => setSearchTerm(e.target.value)}\r\n                />\r\n                <ThemeToggle/>\r\n            </div>\r\n            <div>\r\n                {filteredUsers.map(user => (\r\n                    <UserComponent\r\n                        key={user.id}\r\n                        user={user}\r\n                        onSelectUser={onSelectUser}\r\n                        unreadCount={unreadCounts[user.id] || 0}\r\n                    />\r\n                ))}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default UsersList;","import axios from 'axios';\r\n\r\nconst FAST_API_URL = window.env.FAST_API_URL;\r\nconst API_KEY = window.env.API_KEY;\r\nconst API_URL = `${FAST_API_URL}/api`;\r\nconst TELEGRAM_API_URL = `https://api.telegram.org/bot${API_KEY}`;\r\nconst TELEGRAM_FILE_URL = `https://api.telegram.org/file/bot${API_KEY}`;\r\n\r\nconst axiosInstance = axios.create({\r\n    baseURL: API_URL,\r\n    headers: {\r\n        'Authorization': `Bearer ${API_KEY}`\r\n    }\r\n});\r\n\r\nexport const getUsers = async () => {\r\n    const response = await axiosInstance.get('/users')\r\n    return response.data.users;\r\n};\r\n\r\nexport const getUnreadMessages = async () => {\r\n    const response = await axiosInstance.get('/unreadMessages')\r\n    return response.data.unread_messages;\r\n};\r\n\r\nexport const getMessages = async (user_id) => {\r\n    const response = await axiosInstance.get(`/messages/${user_id}`);\r\n    return response.data.messages;\r\n};\r\n\r\nexport const markMessagesAsRead = async (userId) => {\r\n    await axiosInstance.post(`/markMessagesAsRead/${userId}`);\r\n};\r\n\r\n\r\nexport const getFileUrl = async (fileId) => {\r\n    const url = `${TELEGRAM_API_URL}/getFile`;\r\n    const response = await axios.post(url, {\r\n        file_id: fileId,\r\n    });\r\n\r\n    return `${TELEGRAM_FILE_URL}/${response.data.result.file_path}`;\r\n}\r\n\r\n\r\nexport const sendMessage = async (userId, message) => {\r\n    const response = await axios.post(`${TELEGRAM_API_URL}/sendMessage`, {\r\n        chat_id: userId,\r\n        text: message,\r\n    });\r\n    return response.data.result;\r\n};\r\n\r\n\r\nconst sendPhoto = async (chatId, photo, caption = '') => {\r\n    const url = `${TELEGRAM_API_URL}/sendPhoto`;\r\n    const formData = new FormData();\r\n    formData.append('chat_id', chatId);\r\n    formData.append('photo', photo);\r\n    if (caption) {\r\n        formData.append('caption', caption);\r\n    }\r\n\r\n    const response = await axios.post(url, formData, {\r\n        headers: {\r\n            'Content-Type': 'multipart/form-data',\r\n        },\r\n    });\r\n\r\n    const fileInfo = response.data.result.photo[response.data.result.photo.length - 1];\r\n    const fileId = fileInfo.file_id;\r\n    const fileSize = fileInfo.file_size;\r\n\r\n    response.data.result.document =\r\n        {\r\n            file_name: photo.name,\r\n            file_id: fileId,\r\n            file_size: fileSize,\r\n            mime_type: photo.type,\r\n        }\r\n\r\n    return response.data.result;\r\n};\r\n\r\n\r\nconst sendVideo = async (chatId, video, caption = '') => {\r\n    const url = `${TELEGRAM_API_URL}/sendVideo`;\r\n    const formData = new FormData();\r\n    formData.append('chat_id', chatId);\r\n    formData.append('video', video);\r\n    if (caption) {\r\n        formData.append('caption', caption);\r\n    }\r\n\r\n    const response = await axios.post(url, formData, {\r\n        headers: {\r\n            'Content-Type': 'multipart/form-data',\r\n        },\r\n    });\r\n\r\n    const fileInfo = response.data.result.video;\r\n    const fileId = fileInfo.file_id;\r\n    const fileSize = fileInfo.file_size;\r\n\r\n    response.data.result.document =\r\n        {\r\n            file_name: video.name,\r\n            file_id: fileId,\r\n            file_size: fileSize,\r\n            mime_type: video.type,\r\n        }\r\n    console.log(response.data.result)\r\n    return response.data.result;\r\n\r\n};\r\n\r\n\r\nconst sendDocument = async (chatId, document, caption = '') => {\r\n    const url = `${TELEGRAM_API_URL}/sendDocument`;\r\n    const formData = new FormData();\r\n    formData.append('chat_id', chatId);\r\n    formData.append('document', document);\r\n    if (caption) {\r\n        formData.append('caption', caption);\r\n    }\r\n\r\n    const response = await axios.post(url, formData, {\r\n        headers: {\r\n            'Content-Type': 'multipart/form-data',\r\n        },\r\n    });\r\n\r\n    return response.data.result;\r\n};\r\n\r\n\r\nexport const sendMessageWithFile = async (chatId, file, caption = '') => {\r\n    const mimeType = file.type;\r\n\r\n    if (mimeType.startsWith('image/')) {\r\n        return sendPhoto(chatId, file, caption);\r\n    } else if (mimeType.startsWith('video/')) {\r\n        return sendVideo(chatId, file, caption);\r\n    } else {\r\n        return sendDocument(chatId, file, caption);\r\n    }\r\n};\r\n\r\n\r\nexport const sendMediaGroup = async (chatId, files, caption = '') => {\r\n    const formData = new FormData();\r\n    formData.append('chat_id', chatId);\r\n\r\n    const media = files.map((file, index) => {\r\n        const type = file.type.startsWith('image/') ? 'photo' : file.type.startsWith('video/') ? 'video' : 'document';\r\n        const randomName = `random-name-${index}`;\r\n        formData.append(randomName, file);\r\n        return {\r\n            type: type,\r\n            media: `attach://${randomName}`,\r\n            caption: index === 0 ? caption : '', // Добавляем подпись только к первому файлу\r\n            parse_mode: 'HTML', // Если нужно использовать HTML-разметку в подписи\r\n        };\r\n    });\r\n\r\n    formData.append('media', JSON.stringify(media));\r\n\r\n    const response = await axios.post(`${TELEGRAM_API_URL}/sendMediaGroup`, formData, {\r\n        headers: {\r\n            'Content-Type': 'multipart/form-data',\r\n        },\r\n    });\r\n\r\n    // Добавляем информацию о файлах в ответ\r\n    response.data.result.forEach((item, index) => {\r\n        const fileInfo = item.photo ? item.photo[item.photo.length - 1] : item.video ? item.video : item.document;\r\n        const fileId = fileInfo.file_id;\r\n        const fileSize = fileInfo.file_size;\r\n\r\n        item.document = {\r\n            file_name: files[index].name,\r\n            file_id: fileId,\r\n            file_size: fileSize,\r\n            mime_type: files[index].type,\r\n        };\r\n    });\r\n\r\n    console.log(response.data.result);\r\n    return response.data.result;\r\n};","import React from 'react';\r\n\r\nconst ClipIcon = ({ color, width, height, style, strokeWidth=1.5 }) => {\r\n    return (\r\n        <svg\r\n            xmlns=\"http://www.w3.org/2000/svg\"\r\n            className=\"icon icon-tabler icon-tabler-paperclip\"\r\n            fill=\"none\"\r\n            height={height}\r\n            stroke={color}\r\n            strokeLinecap=\"round\"\r\n            strokeLinejoin=\"round\"\r\n            strokeWidth={strokeWidth}\r\n            viewBox=\"0 0 24 24\"\r\n            width={width}\r\n            style={style}\r\n        >\r\n            <path d=\"M0 0h24v24H0z\" fill=\"none\" stroke=\"none\"/>\r\n            <path d=\"M15 7l-6.5 6.5a1.5 1.5 0 0 0 3 3l6.5 -6.5a3 3 0 0 0 -6 -6l-6.5 6.5a4.5 4.5 0 0 0 9 9l6.5 -6.5\"/>\r\n        </svg>\r\n    );\r\n};\r\n\r\nexport default ClipIcon;","import React from 'react';\r\n\r\nconst SendIcon = ({ color, width, height, style }) => {\r\n    return (\r\n        <svg\r\n            xmlns=\"http://www.w3.org/2000/svg\"\r\n            xmlnsXlink=\"http://www.w3.org/1999/xlink\"\r\n            width={width}\r\n            height={height}\r\n            viewBox=\"0 0 20 18\"\r\n            style={style}\r\n        >\r\n            <title>send</title>\r\n            <desc>Created with Sketch.</desc>\r\n            <g id=\"Icons\" stroke=\"none\" strokeWidth=\"1\" fill=\"none\" fillRule=\"evenodd\">\r\n                <g id=\"Rounded\" transform=\"translate(-374.000000, -1529.000000)\">\r\n                    <g id=\"Content\" transform=\"translate(100.000000, 1428.000000)\">\r\n                        <g id=\"-Round-/-Content-/-send\" transform=\"translate(272.000000, 98.000000)\">\r\n                            <g>\r\n                                <polygon id=\"Path\" points=\"0 0 24 0 24 24 0 24\"/>\r\n                                <path\r\n                                    d=\"M3.4,20.4 L20.85,12.92 C21.66,12.57 21.66,11.43 20.85,11.08 L3.4,3.6 C2.74,3.31 2.01,3.8 2.01,4.51 L2,9.12 C2,9.62 2.37,10.05 2.87,10.11 L17,12 L2.87,13.88 C2.37,13.95 2,14.38 2,14.88 L2.01,19.49 C2.01,20.2 2.74,20.69 3.4,20.4 Z\"\r\n                                    id=\"🔹Icon-Color\"\r\n                                    fill={color}\r\n                                />\r\n                            </g>\r\n                        </g>\r\n                    </g>\r\n                </g>\r\n            </g>\r\n        </svg>\r\n    );\r\n};\r\n\r\nexport default SendIcon;","import React, { useState, useRef, useEffect } from 'react';\r\nimport { sendMessage, sendMessageWithFile, sendMediaGroup} from '../../api/api';\r\n\r\n\r\nimport styles from './MessageInput.module.css';\r\nimport ClipIcon from \"../ui/icons/ClipIcon\";\r\nimport SendIcon from \"../ui/icons/SendIcon\";\r\n\r\nconst MessageInput = ({ userId, onSendMessage, socket}) => {\r\n    const [message, setMessage] = useState('');\r\n    const [attachedFiles, setAttachedFiles] = useState([]);\r\n\r\n    const textareaRef = useRef(null);\r\n    const fileInputRef = useRef(null);\r\n    const messageIdCounter = useRef(1);\r\n\r\n    const generateUniqueId = () => {\r\n        return messageIdCounter.current++;\r\n    };\r\n\r\n    useEffect(() => {\r\n        const { message, files } = loadStateFromSessionStorage(userId);\r\n        setMessage(message);\r\n        setAttachedFiles(files);\r\n        console.log(files);\r\n    }, [userId]);\r\n\r\n    useEffect(() => {\r\n        adjustTextareaHeight();\r\n    }, [message]);\r\n\r\n    const handleSendMessage = async () => {\r\n        if (message.trim() || attachedFiles.length > 0) {\r\n            // Генерируем уникальный id для сообщения\r\n            const uniqueId = generateUniqueId();\r\n\r\n            // Сначала добавляем сообщение в локальное состояние с уникальным id\r\n            const newMessage = {\r\n                id: uniqueId,\r\n                text: message,\r\n                status: 'sending',\r\n                sender: 0,\r\n                recipient: userId,\r\n                date: Date.now() / 1000, // Добавляем текущую дату и время в формате Unix timestamp\r\n                files: [],\r\n                old_id: null,\r\n            };\r\n            if (attachedFiles.length > 0) {\r\n                const newMessageOnFiles = {...newMessage, files_count: attachedFiles.length};\r\n                onSendMessage(newMessageOnFiles);\r\n            } else {\r\n                onSendMessage(newMessage);\r\n            }\r\n            delete newMessage.files_count;\r\n\r\n            setMessage('');\r\n            setAttachedFiles([]);\r\n            saveStateToSessionStorage(userId, '', []);\r\n\r\n            // Затем отправляем сообщение на сервер\r\n            try {\r\n                if (attachedFiles.length > 0) {\r\n                    let fileResponses;\r\n                    if (attachedFiles.length === 1) {\r\n                        // Отправляем один файл\r\n                        const response = await sendMessageWithFile(userId, attachedFiles[0], message);\r\n                        fileResponses = [{\r\n                            file: attachedFiles[0],\r\n                            response: response.document,\r\n                        }];\r\n\r\n                        const updateMessage = {\r\n                            ...newMessage,\r\n                            status: 'sent',\r\n                            id: response.message_id,\r\n                            date: response.date,\r\n                            files: fileResponses.map(fileResponse => ({\r\n                                file_name: fileResponse.response.file_name,\r\n                                file_id: fileResponse.response.file_id,\r\n                                file_size: fileResponse.response.file_size,\r\n                                mime_type: fileResponse.response.mime_type,\r\n                            })),\r\n                        }\r\n                        onSendMessage({\r\n                            ...updateMessage,\r\n                            old_id: uniqueId,\r\n                        });\r\n\r\n                        delete updateMessage.old_id;\r\n\r\n                        socket.emit('updateMessage', {\"user\": updateMessage.recipient, \"message\": updateMessage});\r\n                    } else {\r\n                        // Отправляем несколько файлов\r\n\r\n                        const response = await sendMediaGroup(userId, attachedFiles, message);\r\n\r\n                        fileResponses = response.map((item, index) => ({\r\n                            file: attachedFiles[index],\r\n                            response: item.document || item.photo || item.video,\r\n                        }));\r\n\r\n                        const updateMessage = {\r\n                            ...newMessage,\r\n                            status: 'sent',\r\n                            id: response[0].message_id, // Используем message_id первого сообщения в группе\r\n                            date: response[0].date, // Используем дату первого сообщения в группе\r\n                            files: fileResponses.map(fileResponse => ({\r\n                                file_name: fileResponse.response.file_name,\r\n                                file_id: fileResponse.response.file_id,\r\n                                file_size: fileResponse.response.file_size,\r\n                                mime_type: fileResponse.response.mime_type,\r\n                            })),\r\n                        }\r\n\r\n                        onSendMessage({\r\n                            ...updateMessage,\r\n                            old_id: uniqueId,\r\n                        });\r\n\r\n                        delete updateMessage.old_id;\r\n\r\n                        socket.emit('updateMessage', {\"user\": updateMessage.recipient, \"message\": updateMessage});\r\n                    }\r\n                } else {\r\n                    // Отправляем просто текстовое сообщение\r\n                    const response = await sendMessage(userId, message);\r\n                    // Обновляем статус сообщения на \"отправлено\" и добавляем идентификатор от Telegram\r\n\r\n                    const updateMessage = {\r\n                        ...newMessage,\r\n                        status: 'sent',\r\n                        id: response.message_id,\r\n                        date: response.date, // Обновляем дату и время при успешной отправке\r\n                    }\r\n\r\n                    onSendMessage({\r\n                        ...updateMessage,\r\n                        old_id: uniqueId,\r\n                    });\r\n\r\n                    delete updateMessage.old_id;\r\n\r\n                    socket.emit('updateMessage', {\"user\": updateMessage.recipient, \"message\": updateMessage});\r\n                }\r\n            } catch (error) {\r\n                // В случае ошибки обновляем статус на \"ошибка\"\r\n                onSendMessage({\r\n                    ...newMessage,\r\n                    status: 'error',\r\n                    date: Date.now() / 1000,\r\n                    old_id: uniqueId,\r\n                });\r\n            }\r\n        }\r\n    };\r\n\r\n    const adjustTextareaHeight = () => {\r\n        const textarea = textareaRef.current;\r\n        if (textarea) {\r\n            textarea.style.height = '34px';\r\n            textarea.style.height = `${textarea.scrollHeight}px`;\r\n        }\r\n    };\r\n\r\n    const handleMessageChange = (e) => {\r\n        const newMessage = e.target.value;\r\n        setMessage(newMessage);\r\n        saveStateToSessionStorage(userId, newMessage, attachedFiles);\r\n    };\r\n\r\n    const handleFileChange = (e) => {\r\n        const files = Array.from(e.target.files);\r\n        setAttachedFiles((prevFiles) => [...prevFiles, ...files]);\r\n        saveStateToSessionStorage(userId, message, [...attachedFiles, ...files]);\r\n    };\r\n\r\n    const handleFileDelete = (index) => {\r\n        setAttachedFiles((prevFiles) => {\r\n            const newFiles = [...prevFiles];\r\n            newFiles.splice(index, 1);\r\n            return newFiles;\r\n        });\r\n\r\n        saveStateToSessionStorage(userId, message, attachedFiles.filter((_, i) => i !== index));\r\n    };\r\n\r\n    const saveStateToSessionStorage = (userId, message, files) => {\r\n        sessionStorage.setItem(`message_${userId}`, message);\r\n        const fileObjects = files.map(file => ({\r\n            name: file.name,\r\n            lastModified: file.lastModified,\r\n            size: file.size,\r\n            type: file.type,\r\n        }));\r\n        sessionStorage.setItem(`files_${userId}`, JSON.stringify(fileObjects));\r\n    };\r\n\r\n    const loadStateFromSessionStorage = (userId) => {\r\n        const savedMessage = sessionStorage.getItem(`message_${userId}`);\r\n        const savedFiles = sessionStorage.getItem(`files_${userId}`);\r\n        const fileObjects = savedFiles ? JSON.parse(savedFiles) : [];\r\n        const files = fileObjects.map(fileObj => new File([], fileObj.name, {\r\n            lastModified: fileObj.lastModified,\r\n            size: fileObj.size,\r\n            type: fileObj.type,\r\n        }));\r\n        return {\r\n            message: savedMessage || '',\r\n            files: files,\r\n        };\r\n    };\r\n\r\n\r\n    return (\r\n        <div className={styles.inputContainer}>\r\n            {attachedFiles.length > 0 && (\r\n                <div className={styles.attachedFiles}>\r\n                    {attachedFiles.map((file, index) => (\r\n\r\n                        <div key={index} className={styles.attachedFileContainer}>\r\n                            <div className={styles.attachedFileCounterWeight}></div>\r\n                            <div className={styles.attachedFile}>{file.name}</div>\r\n                            <div className={styles.attachedFileCancel} onClick={() => handleFileDelete(index)}>\r\n                                <div className={styles.attachedFileCancelLine}></div>\r\n                                <div className={styles.attachedFileCancelLine}></div>\r\n                            </div>\r\n                        </div>\r\n\r\n                    ))}\r\n                </div>\r\n            )}\r\n            <div style={{ display: 'flex', justifyContent: 'space-around', width: '100%', alignItems: 'flex-end' }}>\r\n                <div className={styles.AttachButton}\r\n                     style={{ margin: '0 8px 0 8px', display: 'flex', justifyItems:'center', alignItems: 'center' }}\r\n                     onClick={() => fileInputRef.current.click()}>\r\n                    {(localStorage.getItem('theme') === 'dark') ? (\r\n                        <ClipIcon color={\"#8673e0\"} width={\"32px\"} height={\"32px\"} />\r\n                    ) : (\r\n                        <ClipIcon color={'#338feb'} width={\"32px\"} height={\"32px\"} />\r\n                    )}\r\n                </div>\r\n                <textarea\r\n                    ref={textareaRef}\r\n                    className={styles.TextArea}\r\n                    placeholder=\"Написать сообщение...\"\r\n                    value={message}\r\n                    onChange={handleMessageChange}\r\n                    onInput={adjustTextareaHeight}\r\n                />\r\n                <input\r\n                    type=\"file\"\r\n                    multiple\r\n                    onChange={handleFileChange}\r\n                    className={styles.fileInput}\r\n                    style={{ display: 'none' }}\r\n                    ref={fileInputRef}\r\n                />\r\n                <div className={styles.sendButtonContainer}\r\n                     style={{ margin: '0 8px 0 8px', display: 'flex', justifyItems:'center', alignItems: 'center' }}\r\n                     onClick={handleSendMessage}>\r\n                    {(localStorage.getItem('theme') === 'dark') ? (\r\n                        <SendIcon color={\"#8673e0\"} width={\"32px\"} height={\"32px\"} />\r\n                    ) : (\r\n                        <SendIcon color={\"#338feb\"} width={\"32px\"} height={\"32px\"} />\r\n                    )}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\n\r\nexport default MessageInput;","import React from 'react';\r\n\r\nconst FileIcon = ({ className }) => {\r\n    return (\r\n        <svg\r\n            xmlns=\"http://www.w3.org/2000/svg\"\r\n            x=\"0px\"\r\n            y=\"0px\"\r\n            viewBox=\"0 0 26 26\"\r\n            className={className}\r\n        >\r\n            <title>User</title>\r\n            <path d=\"M 20.265625 4.207031 C 20.023438 3.96875 19.773438 3.722656 19.527344 3.476563 C 19.277344 3.230469 19.035156 2.980469 18.792969 2.734375 C 17.082031 0.988281 16.0625 0 15 0 L 7 0 C 4.796875 0 3 1.796875 3 4 L 3 22 C 3 24.203125 4.796875 26 7 26 L 19 26 C 21.203125 26 23 24.203125 23 22 L 23 8 C 23 6.9375 22.011719 5.917969 20.265625 4.207031 Z M 21 22 C 21 23.105469 20.105469 24 19 24 L 7 24 C 5.894531 24 5 23.105469 5 22 L 5 4 C 5 2.894531 5.894531 2 7 2 L 14.289063 1.996094 C 15.011719 2.179688 15 3.066406 15 3.953125 L 15 7 C 15 7.550781 15.449219 8 16 8 L 19 8 C 19.996094 8 21 8.003906 21 9 Z\" />\r\n        </svg>\r\n    );\r\n};\r\n\r\nexport default FileIcon;","import React, { useState, useEffect } from 'react';\r\nimport styles from './Message.module.css';\r\nimport { getFileUrl } from '../../api/api';\r\nimport Modal from 'react-modal';\r\nimport FileIcon from \"../ui/icons/FileIcon\";\r\n\r\nModal.setAppElement('#root'); // Укажите корневой элемент для модального окна\r\n\r\nconst MessageComponent = ({ message }) => {\r\n    const [loading, setLoading] = useState(true);\r\n    const [files, setFiles] = useState([]);\r\n    const [modalIsOpen, setModalIsOpen] = useState(false);\r\n    const [selectedImage, setSelectedImage] = useState('');\r\n\r\n    const messageClass = message.sender === 0 ? styles.rightMessage : styles.leftMessage;\r\n\r\n    useEffect(() => {\r\n        const fetchFiles = async () => {\r\n            const urls = await Promise.all(message.files.map(async (file) => {\r\n                if (file.mime_type && file.mime_type.startsWith('image/') && file.file_size > 5 * 1024 * 1024) {\r\n                    return {\r\n                        name: file.file_name,\r\n                        size: file.file_size,\r\n                        mime_type: file.mime_type,\r\n                        file_is_too_big: true,\r\n                    };\r\n                } else if (file.mime_type && file.file_size > 20 * 1024 * 1024) {\r\n                    return {\r\n                        name: file.file_name,\r\n                        size: file.file_size,\r\n                        mime_type: file.mime_type,\r\n                        file_is_too_big: true,\r\n                    };\r\n                }\r\n                const url = await getFileUrl(file.file_id);\r\n                return {\r\n                    name: file.file_name,\r\n                    size: file.file_size,\r\n                    url: url,\r\n                    mime_type: file.mime_type,\r\n                    file_is_too_big: false,\r\n                };\r\n            }));\r\n            setFiles(urls);\r\n            setLoading(false);\r\n\r\n        };\r\n\r\n        if (message.files.length > 0) {\r\n            fetchFiles();\r\n        }\r\n    }, [message.files]);\r\n\r\n    const formatFileSize = (bytes) => {\r\n        if (bytes === 0) return '0 Bytes';\r\n        const k = 1024;\r\n        const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'];\r\n        const i = Math.floor(Math.log(bytes) / Math.log(k));\r\n        return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\r\n    }\r\n\r\n    const formatTime = (unixTime) => {\r\n        const date = new Date(unixTime * 1000);\r\n        const hours = date.getHours().toString().padStart(2, '0');\r\n        const minutes = date.getMinutes().toString().padStart(2, '0');\r\n        return(`${hours}:${minutes}`);\r\n    }\r\n\r\n    const openModal = (url) => {\r\n        setSelectedImage(url);\r\n        setModalIsOpen(true);\r\n    };\r\n\r\n    const closeModal = () => {\r\n        setModalIsOpen(false);\r\n    };\r\n\r\n    return (\r\n        <div className={`${styles.message} ${messageClass}`}>\r\n            {message.files_count > 0 && (\r\n                <div className={styles.fileAttachment}>\r\n                    {Array.from({ length: message.files_count }).map((_, index) => (\r\n                        <div className={styles.shimmerSquare} key={index}></div>\r\n                    ))}\r\n                </div>\r\n            )}\r\n            {message.files.length > 0 && loading ? (\r\n                <div className={styles.fileAttachment}>\r\n                    {Array.from({ length: message.files.length }).map((_, index) => (\r\n                        <div className={styles.shimmerSquare} key={index}></div>\r\n                    ))}\r\n                </div>\r\n            ): files.length > 0 ? (\r\n                <div className={styles.fileAttachment}>\r\n                    {files.map((file, index) => (\r\n                        <div className={styles.file} key={index}>\r\n                            {file.mime_type && file.mime_type.startsWith('image/') && !file.file_is_too_big ? (\r\n                                <div onClick={() => openModal(file.url, 'image')} style={{ cursor: 'pointer' }}>\r\n                                    <img className={styles.image} src={file.url} alt={file.name} />\r\n                                </div>\r\n                            ) : file.mime_type && file.mime_type.startsWith('video/') && !file.file_is_too_big ? (\r\n                                <a href={file.url} download={file.name}>\r\n                                    <video className={styles.video} src={file.url} alt={file.name} controls/>\r\n                                </a>\r\n                            ) : file.mime_type && file.file_is_too_big ? (\r\n                                <div className={styles.document}>\r\n                                    <div>Файл недоступен</div>\r\n                                    <div className={styles.fileName}>{file.name}</div>\r\n                                    <div className={styles.fileSize}>{formatFileSize(file.size)}</div>\r\n                                </div>\r\n                            ) : (\r\n                                <a href={file.url} download={file.name}>\r\n                                    <div className={styles.document}>\r\n                                        <FileIcon className={styles.fileIcon}/>\r\n                                        <div className={styles.fileName}>{file.name}</div>\r\n                                        <div className={styles.fileSize}>{formatFileSize(file.size)}</div>\r\n                                    </div>\r\n                                </a>\r\n                            )}\r\n                        </div>\r\n                    ))}\r\n                </div>\r\n            ) : null}\r\n            <div className={styles.messageText}>{message.text}</div>\r\n            <div className={styles.messageInfo}>\r\n                <span className={styles.dateTime}>{formatTime(message.date)}</span>\r\n                {message.sender === 0 && (\r\n                    <>\r\n                        {message.status === 'sending' && <span className={styles.statusSending}><div className={styles.status}>◴</div></span>}\r\n                        {message.status === 'sent' && <span className={styles.statusSent}>✓</span>}\r\n                        {message.status === 'error' && <span className={styles.statusError}>✖</span>}\r\n                    </>\r\n                )}\r\n            </div>\r\n\r\n            <Modal\r\n                isOpen={modalIsOpen}\r\n                onRequestClose={closeModal}\r\n                contentLabel=\"Image Modal\"\r\n                style={{\r\n                    content: {\r\n                        maxWidth: '80%',\r\n                        maxHeight: '80%',\r\n                        margin: 'auto',\r\n                    },\r\n                }}\r\n            >\r\n                <img src={selectedImage} alt=\"Full size\" style={{ width: '100%', height: 'auto' }} />\r\n            </Modal>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default MessageComponent;","const formatDate = (timestamp) => {\r\n    const now = new Date();\r\n    const messageDate = new Date(timestamp * 1000);\r\n\r\n    const isToday = now.toDateString() === messageDate.toDateString();\r\n    const isYesterday = new Date(now.setDate(now.getDate() - 1)).toDateString() === messageDate.toDateString();\r\n\r\n    if (isToday) {\r\n        return 'Сегодня';\r\n    } else if (isYesterday) {\r\n        return 'Вчера';\r\n    } else {\r\n        const options = { day: 'numeric', month: 'long' };\r\n        return messageDate.toLocaleDateString('ru-RU', options);\r\n    }\r\n};\r\n\r\nexport default formatDate;","import React from 'react';\r\nimport styles from './ScrollDown.module.css';\r\n\r\nfunction ScrollDown({ showScrollButton, onClick }) {\r\n    return (\r\n        <div className={showScrollButton ? styles.scrollButton : styles.scrollButtonHide } onClick={onClick}>↓</div>\r\n\r\n\r\n    );\r\n}\r\n\r\nexport default ScrollDown;","// Messenger.jsx\r\n\r\nimport React, { useState, useEffect, useRef } from 'react';\r\nimport MessageInput from '../../components/MessageInput/MessageInput';\r\nimport Message from \"../../components/Message/Message\";\r\nimport styles from './Messenger.module.css';\r\nimport formatDate from \"./utils/formatDate\";\r\nimport { getMessages, markMessagesAsRead } from '../../api/api';\r\nimport ScrollDown from \"../../components/ui/scrollDown/ScrollDown\";\r\n\r\nconst Messenger = ({ user, toggleUserList, newMessages, addedMessagesRef, socket }) => {\r\n    const [messages, setMessages] = useState([]);\r\n    const [showScrollButton, setShowScrollButton] = useState(false);\r\n    const messagesEndRef = useRef(null);\r\n    const messagesContainerRef = useRef(null);\r\n\r\n    useEffect(() => {\r\n        if (user) {\r\n            const fetchMessages = async () => {\r\n                const storedMessages = JSON.parse(sessionStorage.getItem(`messages_${user.id}`) || '[]');\r\n                const unreadMessages = JSON.parse(sessionStorage.getItem(`unreadMessages_${user.id}`) || '[]');\r\n\r\n                let combinedMessages = [...storedMessages, ...unreadMessages];\r\n\r\n                if (!(user.id in addedMessagesRef.current)) {\r\n                    const oldMessages = await getMessages(user.id);\r\n                    combinedMessages = [...oldMessages, ...combinedMessages];\r\n                    addedMessagesRef.current[user.id] = true;\r\n                    console.log(\"old\", oldMessages);\r\n                }\r\n\r\n                const uniqueMessages = Array.from(new Set(combinedMessages.map(msg => msg.id)))\r\n                    .map(id => combinedMessages.find(msg => msg.id === id));\r\n\r\n                setMessages(uniqueMessages);\r\n                console.log(\"stored\", storedMessages);\r\n                console.log(\"new messages\", unreadMessages);\r\n                console.log(\"combined\", uniqueMessages);\r\n\r\n                // Помечаем все сообщения как прочитанные\r\n                await markMessagesAsRead(user.id);\r\n\r\n                // Очищаем непрочитанные сообщения из sessionStorage\r\n                sessionStorage.setItem(`messages_${user.id}`, JSON.stringify(uniqueMessages));\r\n                sessionStorage.removeItem(`unreadMessages_${user.id}`);\r\n                console.log('combined was saved on storage', sessionStorage.getItem(`messages_${user.id}`));\r\n                console.log('new messages was deleted', sessionStorage.getItem(`unreadMessages_${user.id}`));\r\n            };\r\n\r\n            fetchMessages();\r\n        }\r\n    }, [user, addedMessagesRef]);\r\n\r\n    useEffect(() => {\r\n        setTimeout(() => {\r\n            scrollToBottom({ behavior: \"instant\" }); // Прокрутка при изменении состояния messages\r\n        }, 0);\r\n    }, [messages]);\r\n\r\n    useEffect(() => {\r\n        if (user && newMessages && newMessages[user.id]) {\r\n            console.log(\"for user \", user.id, \" message was handled\")\r\n            setMessages((prevMessages) => {\r\n                const updatedMessages = [...prevMessages];\r\n                newMessages[user.id].forEach(newMessage => {\r\n                    if (!prevMessages.some(msg => msg.id === newMessage.id)) {\r\n                        updatedMessages.push(newMessage);\r\n                    }\r\n                });\r\n                console.log(\"for user \", user.id, \" messages was updated: \", updatedMessages)\r\n                return updatedMessages;\r\n            });\r\n        }\r\n    }, [newMessages, user, addedMessagesRef]);\r\n\r\n    const scrollToBottom = (behavior) => {\r\n        void messagesEndRef.current?.scrollIntoView(behavior);\r\n    };\r\n\r\n    const handleSendMessage = (newMessage) => {\r\n        setMessages((prevMessages) => {\r\n            const updatedMessages = newMessage.old_id === null\r\n                ? [...prevMessages, newMessage]\r\n                : prevMessages.map((msg) =>\r\n                    msg.id === newMessage.old_id ? newMessage : msg\r\n                );\r\n            sessionStorage.setItem(`messages_${user.id}`, JSON.stringify(updatedMessages));\r\n\r\n            return updatedMessages;\r\n        });\r\n    };\r\n\r\n    useEffect(() => {\r\n        const observer = new IntersectionObserver(\r\n            ([entry]) => {\r\n                setShowScrollButton(!entry.isIntersecting);\r\n            },\r\n            {\r\n                root: messagesContainerRef.current,\r\n                rootMargin: '0px 0px 2000px 0px', // Увеличиваем обзор видимости сверху на 50px и снизу на 100px\r\n                threshold: 0.1,\r\n            }\r\n        );\r\n\r\n        const currentMessagesEndRef = messagesEndRef.current; // Сохраняем текущее значение\r\n\r\n        if (currentMessagesEndRef) {\r\n            observer.observe(currentMessagesEndRef);\r\n        }\r\n\r\n        return () => {\r\n            if (currentMessagesEndRef) {\r\n                observer.unobserve(currentMessagesEndRef);\r\n            }\r\n        };\r\n    }, [messages]);\r\n\r\n    return (\r\n        <div className={styles.mainWindow}>\r\n            <div className={styles.container}>\r\n                <div className={styles.header}>\r\n\r\n                    <div className={styles.connectionStatus} onClick={toggleUserList}>\r\n                        <div className={styles.burgerMenu}>\r\n                            <div className={styles.burgerLine}></div>\r\n                            <div className={styles.burgerLine}></div>\r\n                            <div className={styles.burgerLine}></div>\r\n                        </div>\r\n                    </div>\r\n                    <div className={styles.infoContainer}>\r\n                        <div className={styles.userFullName}>{user.name} {user.surname}</div>\r\n                        <div className={styles.chatId}>{user.id}</div>\r\n                    </div>\r\n                    <div className={styles.burgerMenu}>\r\n                    </div>\r\n\r\n                </div>\r\n                <div className={styles.content}>\r\n                    <div className={styles.messages} ref={messagesContainerRef}>\r\n                        {messages\r\n                            .slice() // Создаем копию массива, чтобы не изменять оригинальный массив\r\n                            .sort((a, b) => a.date - b.date) // Сортируем сообщения по дате\r\n                            .map((message, index) => {\r\n                                const currentDate = new Date(message.date * 1000);\r\n                                const prevMessage = messages[index - 1];\r\n                                const prevDate = prevMessage ? new Date(prevMessage.date * 1000) : null;\r\n\r\n                                const showDate = !prevDate || currentDate.toDateString() !== prevDate.toDateString();\r\n\r\n                                return (\r\n                                    <React.Fragment key={message.id}>\r\n                                        {showDate && (\r\n                                            <div className={styles.dateSeparator}>\r\n                                                <span className={styles.dateSeparatorText}>\r\n                                                    {formatDate(message.date)}\r\n                                                </span>\r\n                                            </div>\r\n                                        )}\r\n                                        <Message message={message}/>\r\n                                    </React.Fragment>\r\n\r\n                                );\r\n                            })\r\n                        }\r\n                        <div ref={messagesEndRef}> </div>\r\n                    </div>\r\n                    <ScrollDown showScrollButton={showScrollButton} onClick={() => scrollToBottom({behavior: \"smooth\"})}/>\r\n                </div>\r\n                <MessageInput userId={user.id} onSendMessage={handleSendMessage} socket={socket} />\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Messenger;","import React from \"react\";\r\n\r\n\r\nimport styles from \"./Notification.module.css\";\r\n\r\nconst Notification = ({ user, message, onClickOpen, onClickOk }) => (\r\n    <div className={styles.notification}>\r\n        <div onClick={onClickOpen} className={styles.notificationContent}>\r\n            <div className={styles.notificationUser}>{user.name} {user.surname}</div>\r\n            <div className={styles.notificationText}>{message}</div>\r\n        </div>\r\n        <div onClick={onClickOk} className={styles.notificationClose}>\r\n        Ок\r\n        </div>\r\n    </div>\r\n);\r\n\r\nexport default Notification;","import { io } from 'socket.io-client';\r\nconst FAST_API_URL = window.env.FAST_API_URL;\r\n\r\nconst socket = io(FAST_API_URL, {\r\n    transports: ['websocket'],\r\n    withCredentials: true,\r\n    extraHeaders: {\r\n        \"my-custom-header\": \"abcd\"\r\n    }\r\n});\r\n\r\nexport default socket;","import React, { useEffect, useState, useRef, useCallback } from 'react';\r\nimport UsersList from './UsersList/UsersList';\r\nimport Messenger from './Messenger/Messenger';\r\nimport styles from './Chat.module.css';\r\nimport { getUnreadMessages, getUsers } from \"../api/api\";\r\nimport { enqueueSnackbar, closeSnackbar } from 'notistack';\r\nimport Notification from \"../components/Notification/Notification\";\r\nimport socket from \"../api/socket\";\r\n\r\nconst Chat = () => {\r\n    const [selectedUser, setSelectedUser] = useState(null);\r\n    const [users, setUsers] = useState([]);\r\n    const [isUserListVisible, setIsUserListVisible] = useState(true);\r\n    const [unreadCounts, setUnreadCounts] = useState({});\r\n    const [newMessages, setNewMessages] = useState({});\r\n    const addedMessagesRef = useRef({});\r\n    const [isSocketConnected, setIsSocketConnected] = useState(false);\r\n\r\n    const toggleUserList = () => {\r\n        if (!isUserListVisible) {\r\n            setUnreadCounts((prevCounts) => ({\r\n                ...prevCounts,\r\n                [selectedUser.id]: 0,\r\n            }));\r\n\r\n            setSelectedUser(null);\r\n        }\r\n        setIsUserListVisible(!isUserListVisible);\r\n    };\r\n\r\n    const handleUserSelect = (user) => {\r\n        setSelectedUser(user);\r\n        setIsUserListVisible(false);\r\n\r\n        setUnreadCounts((prevCounts) => ({\r\n            ...prevCounts,\r\n            [user.id]: 0,\r\n        }));\r\n    };\r\n\r\n    const handleNewMessage = useCallback((update) => {\r\n        console.log('New message received:', update);\r\n        if (update.message.sender !== 0) {\r\n            setUnreadCounts((prevCounts) => ({\r\n                ...prevCounts,\r\n                [update.user]: (prevCounts[update.user] || 0) + 1,\r\n            }));\r\n            const user = users.find(u => u.id === update.user);\r\n            if (user !== selectedUser) {\r\n                enqueueSnackbar(\r\n                    <Notification\r\n                        user={user}\r\n                        message={update.message.text}\r\n                        onClickOpen={() => {\r\n                            const user = users.find(u => u.id === update.user);\r\n                            if (user) {\r\n                                handleUserSelect(user);\r\n                                closeSnackbar();\r\n                            }\r\n                        }}\r\n                        onClickOk={() => closeSnackbar()}\r\n                    />,\r\n                );\r\n            }\r\n        } else {\r\n            setUnreadCounts((prevCounts) => ({\r\n                ...prevCounts,\r\n                [update.user]: 0,\r\n            }));\r\n        }\r\n\r\n        setNewMessages((prevMessages) => {\r\n            const senderMessages = prevMessages[update.user] || [];\r\n            if (!senderMessages.some(msg => msg.id === update.message.id)) {\r\n                const updatedMessages = {\r\n                    ...prevMessages,\r\n                    [update.user]: [...senderMessages, update.message],\r\n                };\r\n                let unreadMessages = JSON.parse(sessionStorage.getItem(`unreadMessages_${update.user}`) || '[]');\r\n                if (!Array.isArray(unreadMessages)) {\r\n                    unreadMessages = [];\r\n                }\r\n                unreadMessages.push(update.message);\r\n                sessionStorage.setItem(`unreadMessages_${update.user}`, JSON.stringify(unreadMessages));\r\n\r\n                return updatedMessages;\r\n            }\r\n            console.log('Contain:', newMessages);\r\n            return prevMessages;\r\n        });\r\n    }, [newMessages, users, selectedUser]);\r\n\r\n    useEffect(() => {\r\n        // Обработка нового сообщения\r\n        socket.on('newMessage', handleNewMessage);\r\n        return () => {\r\n            socket.off('newMessage', handleNewMessage);\r\n        };\r\n    }, [handleNewMessage]);\r\n\r\n    useEffect(() => {\r\n        // Отслеживание состояния подключения к сокету\r\n        socket.on('connect', () => {\r\n            setIsSocketConnected(true);\r\n        });\r\n\r\n        socket.on('disconnect', () => {\r\n            setIsSocketConnected(false);\r\n        });\r\n\r\n        return () => {\r\n            socket.off('connect');\r\n            socket.off('disconnect');\r\n        };\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        // Загрузка непрочитанных сообщений при монтировании компонента\r\n        const fetchUnreadMessages = async () => {\r\n            try {\r\n                const unreadMessages = await getUnreadMessages();\r\n\r\n                // Группируем сообщения по пользователю и обновляем счетчик\r\n                const groupedMessages = unreadMessages.reduce((acc, message) => {\r\n                    const userId = message.user;\r\n                    if (!acc[userId]) {\r\n                        acc[userId] = { messages: [], count: 0 };\r\n                    }\r\n                    acc[userId].messages.push(message.message);\r\n                    acc[userId].count += 1;\r\n                    return acc;\r\n                }, {});\r\n\r\n                // Сохраняем сообщения в sessionStorage\r\n                Object.keys(groupedMessages).forEach(userId => {\r\n                    const { messages, count } = groupedMessages[userId];\r\n                    sessionStorage.setItem(`unreadMessages_${userId}`, JSON.stringify(messages));\r\n\r\n                    // Обновляем состояние unreadCounts\r\n                    setUnreadCounts((prevCounts) => ({\r\n                        ...prevCounts,\r\n                        [userId]: count,\r\n                    }));\r\n                });\r\n\r\n            } catch (error) {\r\n                console.error('Error fetching unread messages:', error);\r\n            }\r\n        };\r\n\r\n        fetchUnreadMessages();\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        const fetchUsers = async () => {\r\n            const usersData = await getUsers();\r\n            setUsers(usersData);\r\n        };\r\n        fetchUsers();\r\n        if (window.Telegram && window.Telegram.WebApp) {\r\n            window.Telegram.WebApp.ready()\r\n            window.Telegram.WebApp.enableClosingConfirmation();\r\n            window.Telegram.WebApp.disableVerticalSwipes();\r\n            window.Telegram.WebApp.expand();\r\n        }\r\n    }, []);\r\n\r\n    if (!isSocketConnected) {\r\n        return (\r\n            <div className={styles.connectingContainer}>\r\n                <div className={styles.connecting}>\r\n                    <div className={styles.serverIcon}></div>\r\n                    <div className={styles.connectingArrows}>\r\n                        <div className={styles.connectingArrow}></div>\r\n                        <div className={styles.connectingArrow}></div>\r\n                        <div className={styles.connectingArrow}></div>\r\n                    </div>\r\n                </div>\r\n                <div className={styles.connecting}>\r\n                    Подключение\r\n                    <span className={styles.connectingDot}>.</span>\r\n                    <span className={styles.connectingDot}>.</span>\r\n                    <span className={styles.connectingDot}>.</span>\r\n\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n                return (\r\n                <div className={styles.chatContainer}>\r\n                    <div className={`${styles.userList} ${isUserListVisible ? styles.visible : ''}`}>\r\n                        <UsersList users={users} onSelectUser={handleUserSelect} unreadCounts={unreadCounts}/>\r\n                    </div>\r\n                    <div className={styles.chat}>\r\n                        {selectedUser ? (\r\n                            <Messenger user={selectedUser} toggleUserList={toggleUserList} newMessages={newMessages}\r\n                                       addedMessagesRef={addedMessagesRef} socket={socket}/>\r\n                        ) : (\r\n                            <p>Выберите пользователя, чтобы начать общение.</p>\r\n                        )}\r\n                    </div>\r\n                </div>\r\n                );\r\n                };\r\n\r\n                export default Chat;","// App.js\n\nimport styles from './App.module.css';\nimport React from 'react';\nimport Chat from './blocks/Chat';\nimport {SnackbarProvider} from 'notistack';\n\n\nfunction App() {\n    return (\n        <div className={styles.app}>\n          <SnackbarProvider className={styles.transparentSnackbar} maxSnack={1} anchorOrigin={{ vertical: 'top', horizontal: 'center' }} preventDuplicate autoHideDuration={3000}>\n            <Chat/>\n          </SnackbarProvider>\n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n    <App/>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"inputContainer\":\"MessageInput_inputContainer__1Mj6U\",\"AttachButton\":\"MessageInput_AttachButton__2Q40Z\",\"attachedFiles\":\"MessageInput_attachedFiles__27RvM\",\"attachedFileContainer\":\"MessageInput_attachedFileContainer__RbMfr\",\"attachedFileCounterWeight\":\"MessageInput_attachedFileCounterWeight__3uSZy\",\"attachedFile\":\"MessageInput_attachedFile__1OmXk\",\"attachedFileCancel\":\"MessageInput_attachedFileCancel__31L5c\",\"attachedFileCancelLine\":\"MessageInput_attachedFileCancelLine__1dBia\",\"fileInput\":\"MessageInput_fileInput__3WHAv\",\"TextArea\":\"MessageInput_TextArea__1Y39O\",\"sendButtonContainer\":\"MessageInput_sendButtonContainer__21CGC\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"userCard\":\"User_userCard__1QrEB\",\"userInfoContainer\":\"User_userInfoContainer__3_pWZ\",\"userIconContainer\":\"User_userIconContainer__1vxbk\",\"userIcon\":\"User_userIcon__I8LB9\",\"userInfo\":\"User_userInfo__3hRN_\",\"userFullName\":\"User_userFullName__Nwv4f\",\"additionInfo\":\"User_additionInfo__3iBKM\",\"unreadCount\":\"User_unreadCount__1iS3E\",\"count\":\"User_count__1c6nB\"};"],"sourceRoot":""}